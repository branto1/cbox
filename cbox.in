#!/bin/bash

set -e

[ "$(whoami)" != "root" ] && {
	echo "Need root baby"
	exit 1
}

[ -f /root/.cbox ] && {
	. /root/.cbox
	echo "Cluster: $cboxclustername appears to be installed on the system"
	echo ""
	# TODO: would like to be able to skip this question if -f is used:
	read -p "Do you want to totally destroy $cboxclustername (y/N)? " ans

	[ -z "$ans" ] && [ "$ans" != "y" ] && {
		echo "Aborting"
		exit 1
	}

	# go as far as we can without failing
	set +e

	echo "Destroying nodes:"

	for i in $(virsh list --all | grep $cboxclustername-node | awk '{print $2}'); do
		virsh destroy $i
		virsh undefine $i
	done

	echo "Destroying virtual network:"

	for i in 0 1; do
		virsh net-destroy $cboxclustername-br$i
		virsh net-undefine $cboxclustername-br$i
	done

	echo "Purging nodes disks $cboxvmsdir/$cboxclustername"
	rm -rf $cboxvmsdir/$cboxclustername

	echo "Removing keys from /root/.ssh and update known_hosts"

	cat /root/.ssh/known_hosts | \
		grep -v "^$cboxclustername-node" > /root/.ssh/known_hosts.new
	mv /root/.ssh/known_hosts.new /root/.ssh/known_hosts

	echo "Restore /etc/hosts"
	mv -f /etc/hosts.cbox /etc/hosts

	echo "Restore /etc/fence_virt.conf"
	mv -f /etc/fence_virt.conf.cbox /etc/fence_virt.conf

	echo "Stopping fence_virtd"
	service fence_virtd stop

	rm -f /root/.cbox

	echo "We have done our best to restore original configs and destroy"
	echo "$cboxclustername cluster."
	echo ""
	echo "May the force be with you!"

	exit 0
}

# cbox data dir
[ -z "$cboxdatadir" ] && cboxdatadir="DATADIR"

# cbox hooks dir
[ -z "$cboxhooksdir" ] && cboxhooksdir="$cboxdatadir/hooks"

# cbox emulator
[ -z "$cboxemulator" ] && cboxemulator="EMULATOR"

# basic logging
[ -z "$cboxlogdir" ] && cboxlogdir="LOGDIR"
cboxlogfile=$cboxlogdir/cbox-$(date +%F_%T).log

function print_usage() {
	echo "$(basename $0) ver: VERSION"
	echo ""
	echo "usage:"
	echo ""
	echo "$(basename $0) [options]"
	echo ""
	echo "Options:"
	echo " -c cluster_name                set clustername (default: testcluster)"
	echo " -f                             force switch to skip all questions. Use with care!"
	echo " -k kickstart                   use custom kickstart file. This overrides both \-O and \-r."
	echo " -m [pacemaker|rgmanager|none]  use a resource manager (default: none)"
	echo " -n number_of_nodes             a value between 2 and 16 (default: 2)"
	echo " -o path_to_storage_dir         set path where to store VMs (default: /srv/cbox)"
	echo " -O osname                      use kickstart without fedora prefix distributed with cbox. This overrides \-r"
	echo " -q                             enable qdiskd for cman clusters (default: no)"
	echo " -r fedora_release              force fedora release to install on the nodes (defaults: autodetect/same as host)"
	echo " -t [cman|corosync]             define cluster type (default: cman)"
	echo " -h                             this help"
	echo " -v virt_opts                   define virtual nodes and storage size in a comma separated list of parameters"
	echo "    valid parameters are:"
	echo "    ram=XXX                     amount of RAM (for each node) in MB (min. 512 - default 2048)"
	echo "    cpus=XXX                    number of virtual cpus"
	echo "    root=XXX                    size of the root partition in MB (min. 2048 - default 4096)"
	echo "    swap=XXX                    size of the swap partition in MB (min. 512 - default is 1024)"
	echo "    share=XXX                   size of the shared storage disk in MB (min. 20544 - default 20544)"
	echo ""
}

function is_integer() {
	[ "$1" -eq "$1" ] > /dev/null 2>&1
	return $?
}

function parse_virt_opts() {
	OLD_IFS=${IFS}
	IFS=,
	for i in $@; do
		opt=$(echo $i | sed -e 's#=.*##g')
		val=$(echo $i | sed -e 's#.*=##g')
		case $opt in
		ram)
			cboxvirtram=$val
			! is_integer $cboxvirtram && {
				echo "ERROR: virt ram size needs to be an integer"
				exit 1
			}
			[ "$cboxvirtram" -lt "512" ] && {
				echo "ERROR: virt ram size too small to complete the installation (min 512 MB)"
				exit 1
			}
			;;
		cpus)
			cboxvirtcpus=$val
			! is_integer $cboxvirtcpus && {
				echo "ERROR: virt cpus needs to be an integer"
				exit 1
			}
			[ "$cboxvirtcpus" -lt "1" ] && {
				echo "ERROR: virt cpus needs to be a reasonable value (hint: greater than 0)"
				exit 1
			}
			;;
		root)
			cboxvirtroot=$val
			! is_integer $cboxvirtroot && {
				echo "ERROR: virt root size needs to be an integer"
				exit 1
			}
			[ "$cboxvirtroot" -lt "2048" ] && {
				echo "ERROR: virt root size too small to complete the installation (min 2048 MB)"
				exit 1
			}
			;;
		swap)
			cboxvirtswap=$val
			! is_integer $cboxvirtswap && {
				echo "ERROR: virt swap size needs to be an integer"
				exit 1
			}
			[ "$cboxvirtswap" -lt "512" ] && {
				echo "ERROR: virt swap size needs to be a reasonable value (hint: greater than 512 MB)"
				exit 1
			}
			;;
		share)
			cboxvirtshare=$val
			! is_integer $cboxvirtshare && {
				echo "ERROR: virt shared disk size needs to be an integer"
				exit 1
			}
			[ "$cboxvirtshare" -lt "20544" ] && {
				echo "ERROR: virt shared disk size needs to be a reasonable value (hint: greater than 20544 MB)"
				exit 1
			}
			;;
		*)
			echo "ERROR Unknown virtopt $opt=$val"
			exit 1
			;;
		esac
	done
	IFS=${OLD_IFS}
}

# parse command line options
#
# c -> cluster name (cboxclustername)
# h -> help
# m -> resource manager (cboxrasmngr) rgmanager|pacemaker|none
# n -> number of nodes (cboxnumnodes)
# o -> output dir (cboxvmsdir)
# q -> enable qdiskd (cboxqdiskd)
# r -> fedora release (13 / 14 / rawhide)
# t -> type (cboxclustertype) cman|corosync
# v -> virt params (ram/cpu/root/swap)
# l -> disable guestmount and use loop and kpartx

# clear envvars (when adding, make sure to export them below)
cboxclustername=""
cboxforce=""
cboxnumnodes=""
cboxminnodes=""
cboxclustertype=""
cboxkickstart=""
cboxos=""
cboxfedrelease=""
cboxrasmngr=""
cboxqdiskd=""
cboxvmsdir="/srv/cbox"

cboxvirt=""
cboxvirtram=2048
cboxvirtcpus=2
cboxvirtroot=4096
cboxvirtswap=$((cboxvirtram / 2))
cboxvirtshare=20544

while getopts ":c:fhk:lm:n:o:O:qr:t:v:" optflag; do
	case "$optflag" in
	c)
		cboxclustername="$OPTARG"
		;;
	f)
		cboxforce="yes"
		;;
	k)
		cboxkickstart="$OPTARG"
		;;
	l)
		cboxuseloop="yes"
		;;
	m)
		cboxrasmngr="$OPTARG"
		if [ "$cboxrasmngr" != "rgmanager" ] && \
		   [ "$cboxrasmngr" != "pacemaker" ] && \
		   [ "$cboxrasmngr" != "none" ]; then
			echo "ERROR: cluster resource manager has to be rgmanager, pacemaker or none"
			exit 1
		fi
		;;
	n)
		cboxnumnodes="$OPTARG"
		! is_integer $cboxnumnodes && {
			echo "ERROR: number of nodes needs to be an integer (min 2, max 16)"
			exit 1
		}
		;;
	o)
		cboxvmsdir="$OPTARG"
		;;
	O)
		cboxos="$OPTARG"
		;;
	q)
		cboxqdiskd="yes"
		;;
	r)
		cboxfedrelease="$OPTARG"
		;;
	t)
		cboxclustertype="$OPTARG"
		if [ "$cboxclustertype" != "cman" ] && \
		   [ "$cboxclustertype" != "corosync" ]; then
			echo "ERROR: cluster type has to be cman or corosync"
			exit 1
		fi
		;;
	v)
		cboxvirt="$OPTARG"
		;;
	h)
		print_usage
		exit 0
		;;
	\?|:)
		print_usage
		exit 1
		;;
	esac
done

parse_virt_opts "$cboxvirt"

## ask question
echo "***** WARNING *****"
echo ""
echo "cbox is an experimental script to build virtual TEST cluster"
echo "and it performs actions and configurations that might not be"
echo "considered safe on both the host and the guests."
if [ -z "$cboxforce" ]; then
echo "Please abort the execution now unless you fully understand"
echo "what you are doing."
fi
echo "The resulting setup has to be used only for TESTING."
echo "Do NOT place this cluster into production."
echo ""
echo "cbox can only be executed once on each host to create a virtual cluster."
echo "Second execution will safely request to destroy the previously"
echo "created cluster, and start all over again."
echo ""
echo "***** END OF WARNING *****"
echo ""
echo "YOU HAVE BEEN WARNED"
echo ""
if [ -z "$cboxforce" ]; then
echo "If you agree, and want to proceed, please type:"
echo "Yes, I fully understand the risks of what I am doing"
echo ""
read -p "type here: " ans

[ "$ans" = "Yes, I fully understand the risks of what I am doing" ] || {
	echo "Wise choice.. or you simply didn't type it right"
	exit 0
}
fi

echo ""

[ ! -d "$cboxdatadir" ] && {
	echo "ERROR: no valid data directory specified: $cboxdatadir"
	exit 1
}

[ ! -d "$cboxhooksdir" ] && {
	echo "ERROR: no valid hooks directory specified: $cboxhooksdir"
	exit 1
}

[ ! -d "$cboxlogdir" ] && {
	echo "ERROR: no valid log directory specified: $cboxlogdir"
	exit 1
}

touch $cboxlogfile || {
	echo "ERROR: unable to write to logfile: $cboxlogfile"
	exit 1
}

[ -z "$cboxclustername" ] && cboxclustername=testcluster

[ "$(echo ${#cboxclustername})" -gt "12" ] && {
	echo "ERROR: clustername has be 12 or less chars"
	exit 1
}

[ -z "$cboxnumnodes" ] && cboxnumnodes=2
# waiting for cboxforce - let's do the check here
if [ -z "$cboxforce" ]; then
	cboxminnodes="2"
else
	cboxminnodes="1"
fi
if [ "$cboxnumnodes" -lt "$cboxminnodes" ] || \
   [ "$cboxnumnodes" -gt "16" ]; then
	echo "ERROR: invalid number of nodes specified (min $cboxminnodes, max 16)"
	exit 1
fi

[ -z "$cboxclustertype" ] && cboxclustertype=cman

[ -z "$cboxrasmngr" ] && cboxrasmngr=none

if [ -z "$cboxkickstart" ]; then
	if [ -n "$cboxos" ]; then
		cboxkickstart=$cboxdatadir/$cboxos.ks
	else
		if [ -z "$cboxfedrelease" ]; then
			cboxfedrelease=$(cat /etc/fedora-release | awk '{print $3}')
			grep -q -i rawhide /etc/fedora-release && cboxfedrelease=rawhide
		fi
		cboxkickstart=$cboxdatadir/fedora-$cboxfedrelease.ks
	fi
fi

[ ! -f "$cboxkickstart" ] && {
	echo "ERROR: no kickstart file $cboxkickstart"
	exit 1
}

[ -d $cboxvmsdir/$cboxclustername ] && {
	echo "ERROR: $cboxvmsdir/$cboxclustername appears to already exist"
	exit 1
}

## cross checks
[ "$cboxclustertype" = "corosync" ] && [ "$cboxrasmngr" = "rgmanager" ] && {
	echo "ERROR: you can't select corosync and rgmanager together."
	exit 1
}

[ "$cboxclustertype" = "corosync" ] && [ -n "$cboxqdiskd" ] && {
	echo "ERROR: you can't select corosync and qdiskd togetehr."
	exit 1
}

## show details:

echo "***** requested configuration *****"
echo ""
echo "cbox version:             VERSION"
echo ""
echo "cluster name:             $cboxclustername"
echo "cluster nodes:            $cboxnumnodes"
echo "cluster type:             $cboxclustertype"
echo "cluster qdiskd:           $cboxqdiskd"
echo "cluster resource manager: $cboxrasmngr"
echo "cluster fedora release:   $cboxfedrelease"
echo ""
echo "node capacity (for each node):"
echo ""
echo "RAM:                      $cboxvirtram (MB)"
echo "CPU(s):                   $cboxvirtcpus"
echo "root partition size:      $cboxvirtroot (MB)"
echo "swap partition size:      $cboxvirtswap (MB)"
echo ""
echo "shared disk size:         $cboxvirtshare (MB)"
echo ""
echo "under the hood info"
echo "cbox data dir:            $cboxdatadir"
echo "cbox hooks dir:           $cboxhooksdir"
echo "cbox log dir:             $cboxlogdir"
echo "cbox log file:            $cboxlogfile"
echo "cbox VMs storage dir:     $cboxvmsdir"
echo ""
if [ -z "$cboxforce" ]; then
read -p "Proceed (Y/n)? " ans

[ -n "$ans" ] && [ "$ans" != "Y" ] && {
	echo "Aborting"
	exit 1
}
fi

echo "cboxclustername=$cboxclustername" > /root/.cbox
echo "cboxvmsdir=$cboxvmsdir" >> /root/.cbox

cboxtempdir=$cboxvmsdir/$cboxclustername/temp
mkdir -p $cboxtempdir

# export all into enviroment

export cboxdatadir
export cboxhooksdir
export cboxclustername
export cboxnumnodes
export cboxclustertype
export cboxlogdir
export cboxlogfile
export cboxfedrelease
export cboxos
export cboxkickstart
export cboxrasmngr
export cboxqdiskd
export cboxvmsdir
export cboxtempdir
export cboxvirtram
export cboxvirtcpus
export cboxvirtroot
export cboxvirtswap
export cboxvirtshare
export cboxuseloop
export cboxemulator

echo ""
echo "Creating cluster... this might take several minutes"
echo ""

# we catch errors here
set +e

for i in $(LC_ALL=C; echo $cboxhooksdir/*[^~,]); do
	[ -d $i ] && continue
	# skip know scripts
	[ "${i%.cfsaved}" != "${i}" ] && continue
	[ "${i%.rpmsave}" != "${i}" ] && continue
        [ "${i%.rpmorig}" != "${i}" ] && continue
        [ "${i%.rpmnew}" != "${i}" ] && continue
        [ "${i%.swp}" != "${i}" ] && continue
	[ "${i%,v}" != "${i}" ] && continue
	[ "${i%.dpkg-old}" != "${i}" ] && continue
	[ "${i%.dpkg-dist}" != "${i}" ] && continue
	[ "${i%.dpkg-new}" != "${i}" ] && continue

	if [ -x $i ]; then
		echo -n "Executing $(basename $i): "
		echo "Executing $(basename $i)" >> $cboxlogfile
		$i >> $cboxlogfile 2>&1 || {
			echo "ERROR $? from $(basename $i). Please check logs"
			exit 1
		}
		echo "OK"
		echo "Done with $(basename $i)" >> $cboxlogfile
	fi
done

echo "cluster $cboxclustername successfully created and running"

exit 0

# vim:shiftwidth=8:noexpandtab
