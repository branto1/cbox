#!/bin/bash

set -e

[ "$(whoami)" != "root" ] && {
	echo "Need root baby"
	exit 1
}

[ -f /root/.cbox ] && {
	. /root/.cbox
	echo "Cluster: $cboxclustername appears to be installed on the system"
	echo ""
	read -p "Do you want to totally detroy $cboxclustername (y/N)? " ans

	[ -z "$ans" ] && [ "$ans" != "y" ] && {
		echo "Aborting"
		exit 1
	}

	# go as far as we can without failing
	set +e

	echo "Destroying nodes:"

	for i in $(virsh list --all | grep $cboxclustername-node | awk '{print $2}'); do
		virsh destroy $i
		virsh undefine $i
	done

	echo "Destroying virtual network:"

	virsh net-destroy $cboxclustername-br0
	virsh net-undefine $cboxclustername-br0

	echo "Purging nodes disks $cboxvmsdir/$cboxclustername"
	rm -rf $cboxvmsdir/$cboxclustername

	echo "Removing keys from /root/.ssh and update known_hosts"

	cat /root/.ssh/known_hosts | \
		grep -v "^$cboxclustername-node" > /root/.ssh/known_hosts.new
	mv /root/.ssh/known_hosts.new /root/.ssh/known_hosts

	echo "Restore /etc/hosts"
	mv -f /etc/hosts.cbox /etc/hosts

	echo "Restore /etc/fence_virt.conf"
	mv -f /etc/fence_virt.conf.cbox /etc/fence_virt.conf

	echo "Stopping fence_virtd"
	service fence_virtd stop

	rm -f /root/.cbox

	echo "We have done our best to restore original configs and destroy"
	echo "$cboxclustername cluster."
	echo ""
	echo "May the force be with you!"

	exit 0
}

# cbox data dir
[ -z "$cboxdatadir" ] && cboxdatadir="DATADIR"

# cbox hooks dir
[ -z "$cboxhooksdir" ] && cboxhooksdir="$cboxdatadir/hooks"

# basic logging
[ -z "$cboxlogdir" ] && cboxlogdir="LOGDIR"
cboxlogfile=$cboxlogdir/cbox-$(date +%F_%T).log

function print_usage() {
	echo "$(basename $0) usage:"
	echo ""
}

function is_integer() {
    [ "$1" -eq "$1" ] > /dev/null 2>&1
    return $?
}

# parse command line options
#
# c -> cluster name (cboxclustername)
# h -> help
# m -> resource manager (cboxrasmngr) rgmanager|pacemaker|none
# n -> number of nodes (cboxnumnodes)
# o -> output dir (cboxvmsdir)
# r -> fedora release (13 / 14 / rawhide)
# t -> type (cboxclustertype) cman|corosync

# clear envvars (when adding, make sure to export them below)
cboxclustername=""
cboxnumnodes=""
cboxclustertype=""
cboxfedrelease=""
cboxrasmngr=""
cboxvmsdir="/srv/cbox"

while getopts ":c:hm:n:or:t:" optflag; do
	case "$optflag" in
	c)
		cboxclustername="$OPTARG"
		;;
	m)
		cboxrasmngr="$OPTARG"
		if [ "$cboxrasmngr" != "rgmanager" ] && \
		   [ "$cboxrasmngr" != "pacemaker" ] && \
		   [ "$cboxrasmngr" != "none" ]; then
			echo "ERROR: cluster resource manager has to be rgmanager, pacemaker or none"
			exit 1
		fi
		;;
	n)
		cboxnumnodes="$OPTARG"
		! is_integer $cboxnumnodes && {
			echo "ERROR: number of nodes needs to be an integer (min 2, max 16)"
			exit 1
		}
		if [ "$cboxnumnodes" -lt "2" ] || \
		   [ "$cboxnumnodes" -gt "16" ]; then
			echo "ERROR: invalid number of nodes specified (min 2, max 16)"
			exit 1
		fi
		;;
	o)
		cboxvmsdir="$OPTARG"
		;;
	r)
		cboxfedrelease="$OPTARG"
		;;
	t)
		cboxclustertype="$OPTARG"
		if [ "$cboxclustertype" != "cman" ] && \
		   [ "$cboxclustertype" != "corosync" ]; then
			echo "ERROR: cluster type has to be cman or corosync"
			exit 1
		fi
		;;
	h)
		print_usage
		exit 0
		;;
	\?|:)
		print_usage
		exit 1
		;;
	esac
done

## ask question
echo "***** WARNING *****"
echo ""
echo "cbox is an experimental script to build virtual TEST cluster"
echo "and it performs actions and configurations that might not be"
echo "considered safe on both the host and the guests."
echo "Please abort the execution now unless you fully understand"
echo "what you are doing."
echo "The resulting setup has to be used only for TESTING."
echo "By all mean, do NOT place this cluster into production."
echo ""
echo "cbox can only be executed once on each host to create a cluster."
echo "Second execution will safely request to destroy the previously"
echo "created cluster, and start all over again."
echo ""
echo "***** END OF WARNING *****"
echo ""
echo "YOU HAVE BEEN WARNED"
echo ""
echo "If you agree, and want to proceed, please type:"
echo "Yes, I fully understand the risks of what I am doing"
echo ""
read -p "type here: " ans

[ "$ans" = "Yes, I fully understand the risks of what I am doing" ] || {
	echo "Wise choice.. or you simply didn't type it right"
	exit 0
}

echo ""

[ ! -d "$cboxdatadir" ] && {
	echo "ERROR: no valid data directory specified: $cboxdatadir"
	exit 1
}

[ ! -d "$cboxhooksdir" ] && {
	echo "ERROR: no valid hooks directory specified: $cboxhooksdir"
	exit 1
}

[ ! -d "$cboxlogdir" ] && {
	echo "ERROR: no valid log directory specified: $cboxlogdir"
	exit 1
}

touch $cboxlogfile || {
	echo "ERROR: unable to write to logfile: $cboxlogfile"
	exit 1
}

[ -z "$cboxclustername" ] && cboxclustername=testcluster

[ "$(echo ${#cboxclustername})" -gt "12" ] && {
	echo "ERROR: clustername has be 12 or less chars"
	exit 1
}

[ -z "$cboxnumnodes" ] && cboxnumnodes=2

[ -z "$cboxclustertype" ] && cboxclustertype=cman

[ -z "$cboxrasmngr" ] && cboxrasmngr=none

[ -z "$cboxfedrelease" ] && {
	cboxfedrelease=$(cat /etc/fedora-release | awk '{print $3}')
	grep -q -i rawhide /etc/fedora-release && cboxfedrelease=rawhide
}

[ ! -f $cboxdatadir/fedora-$cboxfedrelease.ks ] && {
	echo "ERROR: no kickstart file for fedora $cboxfedrelease"
	exit 1
}

[ -d $cboxvmsdir/$cboxclustername ] && {
	echo "ERROR: $cboxvmsdir/$cboxclustername appears to already exist"
	exit 1
}

## cross checks
[ "$cboxclustertype" = "corosync" ] && [ "$cboxrasmngr" = "rgmanager" ] && {
	echo "ERROR: you can't select corosync and rgmanager together."
	exit 1
}

## show details:

echo "***** requested configuration *****"
echo ""
echo "cluster name:             $cboxclustername"
echo "cluster nodes:            $cboxnumnodes"
echo "cluster type:             $cboxclustertype"
echo "cluster resource manager: $cboxrasmngr"
echo "cluster fedora release:   $cboxfedrelease"
echo ""
echo "under the hood info"
echo "cbox data dir:            $cboxdatadir"
echo "cbox hooks dir:           $cboxhooksdir"
echo "cbox log dir:             $cboxlogdir"
echo "cbox log file:            $cboxlogfile"
echo "cbox VMs storage dir:     $cboxvmsdir"
echo ""
read -p "Proceed (Y/n)? " ans

[ -n "$ans" ] && [ "$ans" != "Y" ] && {
	echo "Aborting"
	exit 1
}

echo "cboxclustername=$cboxclustername" > /root/.cbox
echo "cboxvmsdir=$cboxvmsdir" >> /root/.cbox

cboxtempdir=$cboxvmsdir/$cboxclustername/temp
mkdir -p $cboxtempdir

export cboxdatadir
export cboxhooksdir
export cboxclustername
export cboxnumnodes
export cboxclustertype
export cboxlogdir
export cboxlogfile
export cboxfedrelease
export cboxrasmngr
export cboxvmsdir
export cboxtempdir

echo ""
echo "Creating cluster... this might take several minutes"
echo ""

# we catch errors here
set +e

for i in $(LC_ALL=C; echo $cboxhooksdir/*[^~,]); do
	[ -d $i ] && continue
	# skip know scripts
	[ "${i%.cfsaved}" != "${i}" ] && continue
	[ "${i%.rpmsave}" != "${i}" ] && continue
        [ "${i%.rpmorig}" != "${i}" ] && continue
        [ "${i%.rpmnew}" != "${i}" ] && continue
        [ "${i%.swp}" != "${i}" ] && continue
	[ "${i%,v}" != "${i}" ] && continue
	[ "${i%.dpkg-old}" != "${i}" ] && continue
	[ "${i%.dpkg-dist}" != "${i}" ] && continue
	[ "${i%.dpkg-new}" != "${i}" ] && continue

	if [ -x $i ]; then
		echo -n "Executing $(basename $i): "
		echo "Executing $(basename $i)" >> $cboxlogfile
		$i >> $cboxlogfile 2>&1 || {
			echo "ERROR $? from $(basename $i). Please check logs"
			exit 1
		}
		echo "OK"
		echo "Done with $(basename $i)" >> $cboxlogfile
	fi
done

echo "cluster $cboxclustername successfully created and running"

exit 0
